{"version":3,"sources":["utils/helpers.js","components/Nav/index.js","assets/cover/cover-image.jpg","components/About/index.js","components/Modal/index.js","components/PhotoList/index.js","components/Gallery/index.js","components/Contact/index.js","App.js","reportWebVitals.js","index.js"],"names":["capitalizeFirstLetter","string","charAt","toUpperCase","slice","Nav","props","categories","setCurrentCategory","currentCategory","contactSelected","setContactSelected","useEffect","document","title","name","console","log","data-testid","href","role","aria-label","className","onClick","map","category","About","id","src","coverImage","style","width","alt","Modal","onClose","currentPhoto","description","index","type","PhotoList","useState","setCurrentPhoto","isModalOpen","setIsModalOpen","currentPhotos","filter","photo","toggleModal","image","i","Gallery","ContactForm","email","message","formState","setFormState","errorMessage","setErrorMessage","handleChange","e","target","isValid","test","String","toLowerCase","validateEmail","value","length","onSubmit","preventDefault","htmlFor","defaultValue","onBlur","rows","App","Contact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3174243a.chunk.js","sourcesContent":["export function capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport function validateEmail(email) {\n  var re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}","import React, { useEffect } from \"react\";\nimport { capitalizeFirstLetter } from \"../../utils/helpers\";\n\nfunction Nav(props) {\n  const { categories = [], setCurrentCategory, currentCategory, contactSelected, setContactSelected } = props;\n  // callback fx\n  useEffect(() => {\n    document.title = capitalizeFirstLetter(currentCategory.name);\n    // array with single element, direct hook to rerender component on changes to value of this state\n    // if currentCategory changes, component rerenders so change in document.title is visible to user\n  }, [currentCategory]);\n\n  console.log(\"category\", currentCategory);\n  console.log(\"props\", props);\n  return (\n    <header>\n      <h2>\n        <a data-testid=\"link\" href=\"/\">\n          <span role=\"img\" aria-label=\"camera\">\n            ðŸ“¸\n          </span>\n          Oh Snap!\n        </a>\n      </h2>\n      <nav>\n        <ul className=\"flex-row\">\n          <li className=\"mx-2\">\n            <a data-testid=\"about\" href=\"#about\" onClick={() => setContactSelected(false)}>\n              About me\n            </a>\n          </li>\n          <li className={`mx-2 ${contactSelected && \"navActive\"}`}>\n            <span onClick={() => setContactSelected(true)}>Contact</span>\n          </li>\n          {/* when map over anything in JSX, outermost element must have key attribute */}\n          {/* and return only a single JSX element */}\n          {categories.map((category) => (\n            // SHORT CIRCUIT EXPRESSSION\n            // as long as ${currentCategory.name === category.name, navActive will be returned\n            <li\n              className={`mx-1 ${\n                currentCategory.name === category.name && !contactSelected && \"navActive\"\n              }`}\n              key={category.name}\n            >\n              {/* callback fx declaration to selectively render, not auto */}\n              <span\n                onClick={() => {\n                  setCurrentCategory(category);\n                  setContactSelected(false);\n                }}\n              >\n                {capitalizeFirstLetter(category.name)}\n              </span>\n            </li>\n          ))}\n        </ul>\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","export default __webpack_public_path__ + \"static/media/cover-image.533ae8f6.jpg\";","import React from \"react\";\nimport coverImage from \"../../assets/cover/cover-image.jpg\"\n\nfunction About() {\n    return(\n        <section className=\"my-5\">\n            <h1 id=\"about\">Who am I?</h1>\n            <img src={coverImage} className=\"my-2\" style={{ width: \"100%\" }} alt=\"cover\" ></img>\n        </section>\n    );\n}\n\nexport default About;","import React from \"react\";\n\n\n// destructure props into currentPhoto\nconst Modal = ({ onClose, currentPhoto }) => {\n  // destructure currentPhoto properties into constants to assign values\n  const { name, category, description, index } = currentPhoto;\n\n  return (\n    // JSX\n    <div className=\"modalBackdrop\">\n      <div className=\"modalContainer\">\n        <h3 className=\"modalTitle\">{name}</h3>\n        <img\n          src={`./img/large/${category}/${index}.jpg`}\n          alt=\"current category\"\n        />\n        <p>{description}</p>\n        <button onClick={onClose} type=\"button\">Close this modal</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Modal;\n","// child component of Gallery component handles photo rendering logic\nimport React, { useState } from \"react\";\nimport Modal from \"../Modal\";\n\n// props.category passed down from Gallery as currentCategory.name\n// destructure category from props\nconst PhotoList = ({ category }) => {\n  const [currentPhoto, setCurrentPhoto] = useState();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const [photos] = useState([\n    {\n      name: \"Grocery aisle\",\n      category: \"commercial\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Grocery booth\",\n      category: \"commercial\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Building exterior\",\n      category: \"commercial\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Restaurant table\",\n      category: \"commercial\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Cafe interior\",\n      category: \"commercial\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Cat green eyes\",\n      category: \"portraits\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Green parrot\",\n      category: \"portraits\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Yellow macaw\",\n      category: \"portraits\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Pug smile\",\n      category: \"portraits\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Pancakes\",\n      category: \"food\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Burrito\",\n      category: \"food\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Scallop pasta\",\n      category: \"food\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Burger\",\n      category: \"food\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Fruit bowl\",\n      category: \"food\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Green river\",\n      category: \"landscape\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Docks\",\n      category: \"landscape\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Panoramic village by sea\",\n      category: \"landscape\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Domestic landscape\",\n      category: \"landscape\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n    {\n      name: \"Park bench\",\n      category: \"landscape\",\n      description:\n        \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ultricie\",\n    },\n  ]);\n\n  //   only photos with selected category appear\n  // go through each photo in photos array, find every one matching category selected by user\n  // if photo matches, returned in arr, assigned to currentPhotos\n  // map currentPhotos array, render each photo that matches category selected by user\n  const currentPhotos = photos.filter((photo) => photo.category === category);\n\n  const toggleModal = (image, i) => {\n    setCurrentPhoto({ ...image, index: i });\n    setIsModalOpen(!isModalOpen);\n  };\n\n  return (\n    <div>\n        {/* only renders if isModalOpen is true */}\n      {isModalOpen && (\n      <Modal currentPhoto={currentPhoto} onClose={toggleModal} />\n      )}\n      <div className=\"flex-row\">\n        {currentPhotos.map((image, i) => (\n          <img\n            //   incremental naming of images using i\n            src={`./img/small/${image.category}/${i}.jpg`}\n            alt={image.name}\n            className=\"img-thumbnail mx-1\"\n            onClick={() => toggleModal(image, i)}\n            // NEED key value, a unique string\n            key={image.name}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default PhotoList;\n","import React from \"react\";\nimport PhotoList from \"../PhotoList\";\nimport { capitalizeFirstLetter } from \"../../utils/helpers\";\n\nfunction Gallery({ currentCategory }) {\n  const { name, description } = currentCategory;\n  return (\n    <section>\n      <h1 data-testid=\"h1tag\">{capitalizeFirstLetter(name)}</h1>\n      <p>{description}</p>\n      {/* pass currentCategory.name down as prop into Photolist component */}\n      <PhotoList category={currentCategory.name} />\n    </section>\n  );\n}\n\nexport default Gallery;\n","import React, { useState } from \"react\";\nimport { validateEmail } from \"../../utils/helpers\";\n\nfunction ContactForm() {\n  // Hook that manages form data\n  //   initialize values of state, clear input fields on loading component\n  const [formState, setFormState] = useState({\n    name: \"\",\n    email: \"\",\n    message: \"\",\n  });\n\n  // Hook that manages email error message\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  // destructure formState obj into its properties\n  const { name, email, message } = formState;\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    // state only updates if form data passed quality tests(no err message)\n    if (!errorMessage) {\n      //   async setFormState updates formState value for name\n      //   assign input field value to formState.name\n      // spread operator ...formState retains other key-value pairs in obj\n      // e.target.name is name attribute of form element, matches prop names of formState(name, email, message)\n      setFormState({ ...formState, [e.target.name]: e.target.value });\n      console.log(\"Form\", formState);\n    }\n  }\n\n  //   sync internal state of component formState with user input from DOM\n  // onBlur or onChange event listener ensures this fires everytime keystroke typed into name field\n  function handleChange(e) {\n    // if <input> is email, validate value with validateEmail, assign to isValid\n    if (e.target.name === \"email\") {\n      const isValid = validateEmail(e.target.value);\n      console.log(isValid);\n      // isValid conditional statement\n      if (!isValid) {\n        setErrorMessage(\"Your email is invalid.\");\n      } else {\n        setErrorMessage(\"\");\n      }\n      // if <input> is message and name form elements\n    } else {\n      // if blank, error message\n      if (!e.target.value.length) {\n        setErrorMessage(`${e.target.name} is required.`);\n      } else {\n        setErrorMessage(\"\");\n      }\n    }\n\n    // console.log(\"errorMessage\", errorMessage);\n  }\n\n  // JSX DOM elements\n  return (\n    <section>\n      <h1 data-testid=\"h1tag\">Contact Me</h1>\n      <form id=\"contact-form\" onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"name\">Name:</label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            defaultValue={name}\n            onBlur={handleChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            type=\"email\"\n            name=\"email\"\n            defaultValue={email}\n            onBlur={handleChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"message\">Message:</label>\n          <textarea\n            name=\"message\"\n            rows=\"5\"\n            defaultValue={message}\n            onBlur={handleChange}\n          />\n        </div>\n        {/* if(errorMessage) {\n            <div>\n                <p className=\"error-text\">{errorMessage}</p>\n            </div>\n        } */}\n        {errorMessage && (\n          <div>\n            <p className=\"error-text\">{errorMessage}</p>\n          </div>\n        )}\n        <button data-testid=\"button\" type=\"submit\">\n          Submit\n        </button>\n      </form>\n    </section>\n  );\n}\n\nexport default ContactForm;\n","// import React in every component file\nimport React, { useState } from \"react\";\nimport Nav from \"./components/Nav\";\nimport About from \"./components/About\";\nimport Gallery from \"./components/Gallery\";\nimport ContactForm from \"./components/Contact\";\nimport \"./App.css\";\n\n// JSX\nfunction App() {\n  // initial value of contactSelected is false, prevent ContactForm from showing initially\n  // Gallery and About displays instead\n  const [contactSelected, setContactSelected] = useState(false);\n\n  const [categories] = useState([\n    {\n      // key is often parentheses\n      name: \"commercial\",\n      description:\n        \"Photos of grocery stores, food trucks, and other commercial projects\",\n    },\n    { name: \"portraits\", description: \"Portraits of people in my life\" },\n    { name: \"food\", description: \"Delicious delicacies\" },\n    {\n      name: \"landscape\",\n      description: \"Fields, farmhouses, waterfalls, and the beauty of nature\",\n    },\n  ]);\n\n  const [currentCategory, setCurrentCategory] = useState(categories[0]);\n\n  return (\n    <div>\n      <Nav\n        categories={categories}\n        setCurrentCategory={setCurrentCategory}\n        currentCategory={currentCategory}\n        contactSelected={contactSelected}\n        setContactSelected={setContactSelected}\n      ></Nav>\n      <main>\n        <div>\n          {/* \n          if(!contactSelected) {\n            <>\n              <Gallery currentCategory={currentCategory}></Gallery>\n              <About></About>\n            </> \n          } else {\n              <ContactForm></ContactForm>\n          } */}\n          {/* ternary operator, if contactSelected false, show Gallery and About */}\n          {!contactSelected ? (\n            // React fragments, <React.Fragment></React.Fragment>\n            <>\n              {/* category selected by user, pass from Gallery component */}\n              <Gallery currentCategory={currentCategory}></Gallery>\n              <About></About>\n            </>\n          ) : (\n            <ContactForm></ContactForm>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}